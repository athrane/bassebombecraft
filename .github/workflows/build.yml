on: [push]

name: Build, QA code, test and release

jobs:
  build_job:
    name: Build
    runs-on: ubuntu-latest

    outputs:
      jar_file: ${{ steps.read_jar_name.outputs.jar_file}}
      server_jar_file: ${{ steps.read_server_jar_name.outputs.jar_file}}
      mc_version: ${{ steps.read_mc_version.outputs.version}}
      final_version: ${{ steps.read_final_version.outputs.version}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache Gradle dependencies
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
                
    - name: Install jq
      run: sudo apt-get install jq

    - name: Read version.json into output variable
      id: read_version_json
      run: echo ::set-output name=json::$(cat ./version.json | jq '.')

    - name: Read MOD version into output variable
      id: read_mod_version
      run: echo ::set-output name=version::$(cat ./version.json | jq -r '.modVersion')

    - name: Read MC version into output variable
      id: read_mc_version
      run: echo ::set-output name=version::$(cat ./version.json | jq -r '.minecraftVersion')

    - name: Read final version into output variable
      id: read_final_version
      run: echo ::set-output name=version::${{ steps.read_mc_version.outputs.version }}-${{ steps.read_mod_version.outputs.version }}

    - name: Read jar name into output variable
      id: read_jar_name
      run: echo ::set-output name=jar_file::BasseBombeCraft-${{ steps.read_mc_version.outputs.version }}-${{ steps.read_mod_version.outputs.version }}.jar

    - name: Read server jar name into output variable
      id: read_server_jar_name
      run: echo ::set-output name=jar_file::BasseBombeCraft-${{ steps.read_mc_version.outputs.version }}-${{ steps.read_mod_version.outputs.version }}-server.jar

    - name: Setup JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Delete gradle.properties
      run: rm ./gradle.properties

    - name: Build with Gradle
      run: ./gradlew build

    - name: Upload jar artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.read_jar_name.outputs.jar_file}}
        path: ./build/libs/${{ steps.read_jar_name.outputs.jar_file}}

    - name: Upload server jar artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.read_server_jar_name.outputs.jar_file}}
        path: ./build/libs/${{ steps.read_server_jar_name.outputs.jar_file}}

  create_container_job:
    name: Create container
    runs-on: ubuntu-latest
    needs: build_job

    env:
      DOCKER_BUILDKIT: 1
      FORGE_VERSION: 31.1.10

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create artifact directory used for downloads 
      run: mkdir -p ${{ github.workspace }}/artifact

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ needs.build_job.outputs.server_jar_file}}
        path: ${{ github.workspace }}/artifact/
        
    - name: Display downloaded artifacts
      run: ls -la ${{ github.workspace }}/artifact/

    - name: DockerHub login
      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}

    - name: Build image
      run: docker build . --build-arg MOD_PATH=./artifact --build-arg MOD_JAR=${{ needs.build_job.outputs.server_jar_file }} --build-arg MC_VERSION=${{ needs.build_job.outputs.mc_version }} --build-arg FORGE_VERSION=$FORGE_VERSION --file Dockerfile --tag bassebombecraft/minecraft:${{ needs.build_job.outputs.final_version }}-${{ github.sha }} --tag bassebombecraft/minecraft:latest

    - name: Push image
      run: docker push bassebombecraft/minecraft:${{ needs.build_job.outputs.final_version }}-${{ github.sha }}

    - name: Push image
      run: docker push bassebombecraft/minecraft:latest

  test_job:
    name: Test
    runs-on: ubuntu-latest
    needs: create_container_job
    timeout-minutes: 5

    services:
      mcserver:
        image: bassebombecraft/minecraft:latest
        ports:
          - 25565:25565
        options: --name minecraftserver

    steps:    
      - name: Get Minecraft container health
        run: /usr/bin/docker container inspect -f "{{.State.Health.Status}}" minecraftserver

      - name: Display Minecraft container logs
        run: /usr/bin/docker logs minecraftserver

  release_job:
    name: Release
    runs-on: ubuntu-latest
    needs: test_job

    steps:
    - name: Create artifact directory used for downloads 
      run: mkdir -p ${{ github.workspace }}/artifact    
    
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: ${{ github.workspace }}/artifact/

    - name: Display downloaded artifacts
      run: ls -la ${{ github.workspace }}/artifact/

    - name: Display downloaded artifacts
      run: ls -la ./artifact/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ needs.build_job.outputs.final_version }} - ${{ github.sha }}
        draft: true
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ github.workspace }}/artifact/${{ needs.build_job.outputs.jar_file}}
        asset_name: ${{ needs.build_job.outputs.jar_file}}
        asset_content_type: application/zip

    - name: Upload Release Asset (server jar)
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ github.workspace }}/artifact/${{ needs.build_job.outputs.server_jar_file}}
        asset_name: ${{ needs.build_job.outputs.server_jar_file}}
        asset_content_type: application/zip

  sonar_job:
    name: Sonar analysis 
    runs-on: ubuntu-latest
    needs: build_job

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Delete gradle.properties
      run: rm ./gradle.properties

    - name: Do SonarQube analysis
      run: ./gradlew sonarqube
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
